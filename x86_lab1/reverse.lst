     1                                  ; char* reverse(char* str)
     2                                  ; reverse big letters in sequences inside str
     3                                  ; Kacper Wojakowski 293064
     4                                  
     5                                  	section	.text
     6                                  	global	reverse
     7                                  
     8                                  reverse:
     9                                  	; prologue
    10 00000000 55                      	push	ebp
    11 00000001 89E5                    	mov	ebp, esp
    12                                  
    13                                  	; used registers: eax, edx, ecx
    14                                  	; body
    15 00000003 8B4508                  	mov	eax, [ebp+8]; left ptr
    16 00000006 8B5508                  	mov	edx, [ebp+8]; right ptr
    17                                  
    18 00000009 48                      	dec	eax
    19 0000000A 50                      	push	eax
    20                                  findword: ; find beginning of sequence
    21                                  	; get the end of previous sequence from stack
    22 0000000B 58                      	pop	eax
    23 0000000C 40                      	inc	eax
    24 0000000D 8A08                    	mov	cl, [eax]
    25                                  	; detect end of string
    26 0000000F 84C9                    	test	cl, cl
    27 00000011 7439                    	jz	fin
    28                                  
    29 00000013 80F920                  	cmp	cl, ' '
    30 00000016 7EF3                    	jle	findword
    31 00000018 89C2                    	mov	edx, eax
    32                                  findend: ; find end of sequence
    33 0000001A 42                      	inc	edx
    34 0000001B 8A2A                    	mov	ch, [edx]
    35 0000001D 80FD20                  	cmp	ch, ' '
    36 00000020 7FF8                    	jg	findend
    37 00000022 52                      	push	edx ; save end of sequence on stack
    38                                  
    39                                  	; start swapping
    40 00000023 48                      	dec	eax
    41                                  moveleft: ; find left char for swapping
    42 00000024 40                      	inc	eax
    43 00000025 8A08                    	mov	cl, [eax]
    44 00000027 39D0                    	cmp	eax, edx; swapping finished for sequence
    45 00000029 74E0                    	je	findword
    46 0000002B 80F941                  	cmp	cl, 'A'
    47 0000002E 7CF4                    	jl	moveleft
    48 00000030 80F95A                  	cmp	cl, 'Z'
    49 00000033 7FEF                    	jg	moveleft
    50                                  moveright: ; find right char for swapping
    51 00000035 4A                      	dec	edx
    52 00000036 8A2A                    	mov	ch, [edx]
    53 00000038 39D0                    	cmp	eax, edx; swapping finished for sequence
    54 0000003A 74CF                    	je	findword
    55 0000003C 80FD41                  	cmp	ch, 'A'
    56 0000003F 7CF4                    	jl	moveright
    57 00000041 80FD5A                  	cmp	ch, 'Z'
    58 00000044 7FEF                    	jg	moveright
    59                                  	; swap
    60 00000046 8828                    	mov	[eax], ch
    61 00000048 880A                    	mov	[edx], cl
    62 0000004A EBD8                    	jmp	moveleft
    63                                  
    64                                  fin: ; end function: return the string
    65 0000004C 8B4508                  	mov	eax, [ebp+8]
    66                                  	
    67                                  	; epilogue
    68 0000004F 89EC                    	mov	esp, ebp
    69 00000051 5D                      	pop	ebp
    70 00000052 C3                      	ret
